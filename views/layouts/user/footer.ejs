<!-- ##### Footer Area Start ##### -->
<footer class="footer_area clearfix">
    <div class="container">
        <div class="row align-items-center">
            <!-- Single Widget Area -->
            <div class="col-12 col-lg-4">
                <div class="single_widget_area">
                    <!-- Logo -->
                    <div class="footer-logo mr-50">
                        <a href="index.html"><img src="/img/core-img/logo2.png" alt=""></a>
                    </div>
                    <!-- Copywrite Text -->
                    <p class="copywrite">
                        <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                        Copyright &copy;
                        <script>document.write(new Date().getFullYear());</script> All rights reserved | This template
                        is made with <i class="fa fa-heart-o" aria-hidden="true"></i> by <a href="https://colorlib.com"
                            target="_blank">Colorlib</a> & Re-distributed by <a href="https://themewagon.com/"
                            target="_blank">Themewagon</a>
                        <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. -->
                    </p>
                </div>
            </div>
            <!-- Single Widget Area -->
            <div class="col-12 col-lg-8">
                <div class="single_widget_area">
                    <!-- Footer Menu -->
                    <div class="footer_menu">
                        <nav class="navbar navbar-expand-lg justify-content-end">
                            <button class="navbar-toggler" type="button" data-toggle="collapse"
                                data-target="#footerNavContent" aria-controls="footerNavContent" aria-expanded="false"
                                aria-label="Toggle navigation"><i class="fa fa-bars"></i></button>
                            <div class="collapse navbar-collapse" id="footerNavContent">
                                <ul class="navbar-nav ml-auto">
                                    <li class="nav-item active">
                                        <a class="nav-link" href="index.html">Home</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" href="shop.html">Shop</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" href="product-details.html">Product</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" href="cart.html">Cart</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" href="checkout.html">Checkout</a>
                                    </li>
                                </ul>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</footer>
<!-- ##### Footer Area End ##### -->

<!-- ##### jQuery (Necessary for All JavaScript Plugins) ##### -->
<script src="js/jquery/jquery-2.2.4.min.js"></script>
<!-- Popper js -->
<script src="js/popper.min.js"></script>
<!-- Bootstrap js -->
<script src="js/bootstrap.min.js"></script>
<!-- Plugins js -->
<script src="js/plugins.js"></script>
<!-- Active js -->
<script src="js/active.js"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> -->

<script>

    document.addEventListener('DOMContentLoaded', function () {
        const editAddressLinks = document.querySelectorAll('.edit-address');
        const editAddressForms = document.querySelectorAll('.edit-address-form');
        const deliverHereButtons = document.querySelectorAll('.deliver-here-btn');
        const createNewAddressLink = document.getElementById('createNewAddressLink');
        const newAddressForm = document.getElementById('newAddressForm');

        // Function to update visibility of edit forms and deliver buttons based on selected address
        function updateVisibility() {
            const selectedRadio = document.querySelector('input[name="selectedAddress"]:checked');
            if (selectedRadio) {
                const selectedIndex = selectedRadio.getAttribute('data-index');

                // Hide all edit forms and buttons
                editAddressForms.forEach(form => form.style.display = 'none');
                editAddressLinks.forEach(link => link.style.display = 'none');
                deliverHereButtons.forEach(btn => btn.style.display = 'none');

                // Show the edit icon and deliver here button for the selected address
                document.querySelector(`.edit-address[data-index="${selectedIndex}"]`).style.display = 'inline';
                document.querySelector(`.deliver-here-btn[data-index="${selectedIndex}"]`).style.display = 'block';
            }
        }

        // Add click event listeners to edit address links
        editAddressLinks.forEach(link => {
            link.addEventListener('click', function () {
                const index = this.getAttribute('data-index');

                // Hide all edit forms
                editAddressForms.forEach(form => form.style.display = 'none');

                // Show the clicked edit form
                document.getElementById(`editAddressForm${index}`).style.display = 'block';
            });
        });

        // Update visibility on radio button change
        document.querySelectorAll('input[name="selectedAddress"]').forEach(radio => {
            radio.addEventListener('change', updateVisibility);
        });

        // Show new address form and hide the create new address link
        if (createNewAddressLink) {
            createNewAddressLink.addEventListener('click', function (event) {
                event.preventDefault(); // Prevent the default link behavior

                // Hide all edit forms and deliver buttons
                editAddressForms.forEach(form => form.style.display = 'none');
                deliverHereButtons.forEach(btn => btn.style.display = 'none');

                // Show the new address form
                newAddressForm.style.display = 'block';
                this.style.display = 'none'; // Hide the create new address link
            });
        }

        // Initialize visibility based on the selected radio button on page load
        updateVisibility();
    });

    function addToCart(productId, event) {
        event.preventDefault();
        const button = event.currentTarget;
        const stock = parseInt(button.getAttribute('data-stock'), 10)
        const form = document.getElementById(`add-to-cart-form-${productId}`);
        const quantity = 1
        console.log("st", stock)
        // console.log("for",form);       
        if (quantity <= stock) {
            const formData = new FormData(form);
            console.log("formData", [...formData.entries()]);
            fetch(form.action, {
                method: 'POST',
                body: formData, // This should automatically set Content-Type to multipart/form-data
            })
                .then(response => response.json())
                .then(data => {
                    if (data.message) {
                        Swal.fire({
                            position: "top-end",
                            icon: 'success',
                            title: 'Added to Cart!',
                            text: data.message,
                            showConfirmButton: false,
                            timer: 1500,
                            customClass: {
                                popup: 'small-alert' // Apply custom CSS class
                            }
                        });
                    } else {
                        Swal.fire({
                            position: "top-end",
                            icon: 'error',
                            title: 'Failed to Add',
                            text: data.message || 'Failed to add product to cart.',
                        });
                    }
                })
                .catch(err => {
                    console.log("error", err);
                    Swal.fire({
                        position: "top-end",
                        icon: 'error',
                        title: 'Error',
                        text: 'There was an error adding the product to the cart.',
                    });
                });
        } else {
            Swal.fire({
                position: "top-end",
                icon: 'warning',
                title: 'Out of Stock',
                text: 'This product is currently out of stock.',
                showConfirmButton: false,
                timer: 1500,
                customClass: {
                    popup: 'small-alert' // Apply custom CSS class
                }
            });
        }
    }

    function addToWishlist(productId, event) {
        event.preventDefault();
        fetch(`/shop-to-wishlist/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId: productId })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        position: "top-end",
                        icon: 'success',
                        title: 'Added to Wishlist!',
                        text: 'The product has been added to your wishlist.',
                        showConfirmButton: false,
                        timer: 1500,
                        customClass: {
                            popup: 'small-alert' // Optional: Custom CSS class for alert
                        }
                    });
                    // alert("Product added to wishlist!");
                } else {
                    Swal.fire({
                        position: "top-end",
                        icon: 'error',
                        title: 'Failed to Add',
                        text: 'Could not add the product to the wishlist. Try again!',
                    });
                    // alert("Failed to add product to wishlist.");
                }
            })
            .catch(error => {
                console.error('Error:', error)
                Swal.fire({
                    position: "top-end",
                    icon: 'error',
                    title: 'Error',
                    text: 'There was an error adding the product to the wishlist.',
                });
            });
    }

</script>
<script>

    function toggleAddressForm() {
        const form = document.getElementById('newAddressForm');
        form.style.display = form.style.display === 'none' ? 'block' : 'none';
    }

    function validateForm() {
        // Clear previous error messages
        const errorElements = document.querySelectorAll('.text-danger');
        errorElements.forEach(el => el.textContent = '');

        // Get form values
        const name = document.getElementById('name').value.trim();
        const mobile = document.getElementById('mobile').value.trim();
        const addressLine1 = document.getElementById('addressline1').value.trim();
        const addressLine2 = document.getElementById('addressline2').value.trim();
        const city = document.getElementById('city').value.trim();
        const district = document.getElementById('district').value.trim();
        const state = document.getElementById('state').value.trim();
        const zipCode = document.getElementById('zipCode').value.trim();

        let isValid = true;

        if (name === '') {
            document.getElementById('nameError').textContent = 'Name is required.';
            isValid = false;
        }

        // Validate Mobile using regex
        const mobileRegex = /^[0-9]{10}$/; // Ensure it's a 10-digit number
        if (!mobileRegex.test(mobile)) {
            document.getElementById('mobileError').textContent = 'Mobile number must be a 10-digit number.';
            isValid = false;
        }

        // Validate Address Line 1
        if (addressLine1 === '') {
            document.getElementById('addressLine1Error').textContent = 'Address Line 1 is required.';
            isValid = false;
        }

        // Validate City
        if (city === '') {
            document.getElementById('cityError').textContent = 'City is required.';
            isValid = false;
        }

        // Validate District
        if (district === '') {
            document.getElementById('districtError').textContent = 'District is required.';
            isValid = false;
        }

        // Validate State
        if (state === '') {
            document.getElementById('stateError').textContent = 'State is required.';
            isValid = false;
        }

        // Validate Zip Code using regex
        const zipCodeRegex = /^[0-9]{5}$/; // Ensure it's a 5-digit number
        if (!zipCodeRegex.test(zipCode)) {
            document.getElementById('zipCodeError').textContent = 'Zip Code must be a 5-digit number.';
            isValid = false;
        }
        return isValid;
    }

</script>
</body>

</html>